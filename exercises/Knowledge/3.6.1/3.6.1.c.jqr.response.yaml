- type: MA
  resp:
    - 2
    - 4
    - 5
  text: >-
    What can you do to fix the following code?\n\nint input[5];\n\nfor(int i = 0
    ; i <= 5 ; i++)\n{\n    input[i] = i;\n}
  choices:
    - >-
      Declare "int i" before the for loop, and change the initialization in the
      foor loop to "i = 0"
    - Change "char input[5]" tp "char *input[5]"
    - Change "char input[5]" to "char input[6]"
    - Change "int i = 0" to "int i = 1"
    - Change the test condition in the for loop to "i < 5"
    - Change the test condition in the foor loop to "i <= 4"
    - Change the iteration expression from "i++" to "++i"
- type: MA
  resp:
    - 1
    - 4
    - 6
  text: >-
    What can you do to ensure this code initializes all elements in the array
    and does not read or write out of bounds?\n\nint input[5];\nint i =
    0;\nwhile(++i < 5)\n{\n    input[i] = i;\n}\n
  choices:
    - Change "++i < 5" to "i <= 5" and add "i++;" after "input[i] = i;"
    - Change "++i < 5" to "i < 5" and add "i++;" after "input[i] = i;"
    - Change "++i < 5" to "i < 5"
    - Change "++i < 5" to "i++ <= 4"
    - Change "int i = 0;" to "int i = -1;"
    - Change "int i = 0;" to "int i = 1;"
    - >-
      Change "++i < 5" to "++i <= 5" and update "input[i] = i;" to "input[i-1] =
      i;"
- type: MC
  resp: 3
  text: >-
    You need to ensure that "input[100]" contains a string. What changes to the
    following code will do that?\n\nchar input[100];\n\nstrncpy(input, argv[1],
    sizeof(input));
  choices:
    - Change "input[100]" to "input[101]"
    - Change "sizeof(input)" to "100"
    - Change "sizeof(input)" to sizeof(input - 1)"
    - Change "sizeof(input)" to sizeof(input) - 1"
